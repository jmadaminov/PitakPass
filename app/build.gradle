apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

//repositories {
//    maven { url 'https://maven.google.com' }
//}


android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.novatec.epitak_passenger"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

//        manifestPlaceholders = [
//                onesignal_app_id               : '25ebcc27-1c6c-4a67-a305-10c7c065ef9e',
//                // Project number pulled from dashboard, local value is ignored.
//                onesignal_google_project_number: 'REMOTE'
//        ]

    }

    buildTypes {
        release {
//            testCoverageEnabled = true
//            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled = true
//            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }
}

android.applicationVariants.all { variant ->
    def appName
    //Check if an applicationName property is supplied; if not use the name of the parent project.
    if (project.hasProperty("applicationName")) {
        appName = applicationName
    } else {
        appName = parent.name
    }

    variant.outputs.all { output ->
        outputFileName = "${appName}-${output.baseName}-${variant.versionName}.apk"
    }
}


dependencies {

    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation "androidx.appcompat:appcompat:$rootProject.supportLibraryVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'

    implementation "javax.inject:javax.inject:$javaxInjectVersion"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'junit:junit:4.13.2'

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    //For Coroutine ViewModelScope
//    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycleVersion"
    // For Coroutine LifecycleScope
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    // for Coroutine LiveData
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycleVersion"

    implementation "com.squareup.moshi:moshi-kotlin:1.12.0"
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.12.0")

    implementation 'com.github.bumptech.glide:glide:4.12.0'

    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$rootProject.junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$rootProject.junitVersion"
    testImplementation "io.mockk:mockk:$rootProject.mockkVersion"

//otherLibs
    implementation 'br.com.simplepass:loading-button-android:2.2.0'

//SwipeRefreshLayout
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    //Splitties
    implementation("com.louiscad.splitties:splitties-preferences:$rootProject.splitties_version")
    implementation("com.louiscad.splitties:splitties-activities:$rootProject.splitties_version")
    implementation("com.louiscad.splitties:splitties-fragments:$rootProject.splitties_version")

    implementation 'com.github.takusemba:spotlight:2.0.5'

    //groupie
    implementation "com.xwray:groupie:$rootProject.groupie_version"
    implementation "com.xwray:groupie-kotlin-android-extensions:$rootProject.groupie_version"

    //KTX
    implementation "androidx.core:core-ktx:1.3.2"

    //masked edittext
    implementation 'com.github.pinball83:masked-edittext:1.0.4'

    //BottomSheet Image Picker
    implementation 'com.asksira.android:bsimagepicker:1.3.2'

    //AutoCompleteEditText
    implementation("com.otaliastudios:autocomplete:1.1.0")

    //PAGING
    implementation "androidx.paging:paging-runtime-ktx:$pagingVersion"

//VIEW PAGER2
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    //CALENDAR MATERIAL
//    implementation 'com.github.prolificinteractive:material-calendarview:2.0.1'
//    implementation 'joda-time:joda-time:2.9.9'


    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'


    implementation 'com.wunderlist:sliding-layer:1.2.5'
    implementation 'io.apptik.widget:multislider-holo:1.3'
//    implementation 'com.shawnlin:number-picker:2.4.10'
    implementation 'com.github.skydoves:balloon:1.3.4'
    implementation 'com.google.firebase:firebase-analytics-ktx:19.0.0'
    implementation platform('com.google.firebase:firebase-bom:28.0.1')
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.2.0'


    implementation 'com.onesignal:OneSignal:4.4.2'




//HILT
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
//    implementation "com.google.dagger:hilt-android:$hilt_version"
//    kapt "com.google.dagger:hilt-compiler:$hilt_version"
//
//    def hilt_viewmodels = '1.0.0'
//    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_viewmodels"
//    kapt "androidx.hilt:hilt-compiler:$hilt_viewmodels"
//

    implementation "com.google.firebase:firebase-iid"
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'


    implementation 'com.google.android.gms:play-services-auth:19.2.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:17.5.1'
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
